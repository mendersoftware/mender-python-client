stages:
  - build
  - test

variables:
  # Internal address for nfs sstate cache server (northamerica-northeast1-b)
  SSTATE_CACHE_INTRNL_ADDR: "10.162.0.2"

  # Global environment variables (not meant to be changed)
  DEBIAN_FRONTEND: noninteractive

  # Docker dind configuration.
  # To use dind, make sure gitlab-runner's configuration
  # has a common mount for /certs (i.e. runners.docker.volumes) directory
  # and that the dind service name is always docker (default hostname).
  DOCKER_HOST: "tcp://docker:2376"
  DOCKER_CERT_PATH: "/certs/client"
  DOCKER_TLS_VERIFY: "1"
  DOCKER_TLS_CERTDIR: "/certs"

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-license.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-python3-format.yml'


# build:client:
#   image: mendersoftware/mender-test-containers:mender-client-acceptance-testing
#   stage: build
#   services:
#     - docker:19.03-dind
#   tags:
#     - mender-qa-slave-highcpu
#   before_script:
#     # Export required yocto-build script variables
#     - mkdir -p stage-artifacts
#     - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
#     - chown -R mender:mender ${WORKSPACE}
#     # Enable nesting VMs
#     - modprobe -r kvm_intel && modprobe kvm_intel nested=Y
#     # Enable NFS cache for yocto
#     - mount.nfs4 ${SSTATE_CACHE_INTRNL_ADDR}:/sstate-cache /mnt/sstate-cache
#   script:
#     - mkdir -p ${WORKSPACE}
#     - cd ${WORKSPACE}
#     - chown -R mender:mender ${WORKSPACE}
#     - export HOME="/home/mender"
#     - sudo -E -u mender ${CI_PROJECT_DIR}/tests/integration/yocto/build-script
#   artifacts:
#     expire_in: 1w
#     paths:
#       - stage-artifacts/


# test:integration:
#   variables:
#       GIT_SUBMODULE_STRATEGY: recursive
#   stage: test
#   image: docker/compose:alpine-1.27.4
#   services:
#     - docker:19.03-dind
#   tags:
#     - mender-qa-slave-highcpu
#   # needs:
#   #     - build:client
#   # dependencies:
#   #     - build:client
#   before_script:
#     - apk --update add bash git py-pip gcc make python2-dev
#       libc-dev libffi-dev openssl-dev python3 curl jq sysstat
#     - pip3 install pyyaml
#     - pip3 install -r requirements.txt
#     - apk --update add xz libc6-compat
#     # Install mender-artifact
#     - wget https://downloads.mender.io/mender-artifact/3.4.0/linux/mender-artifact
#     - chmod +x ./mender-artifact
#     - mv ./mender-artifact /usr/bin
#     - mender-artifact --version
#     # - docker version
#     # - docker load -i stage-artifacts/mender-client-qemu.tar
#   script:
#     - echo Running the integration tests...
#     - cd tests/integration
#     - ls mender_integration
#     - ./run.sh test_python_api_client.py::test_update_successful


test:integration:
  stage: test
  # Integration tests depends on running ssh to containers, we're forced to
  # run dockerd on the same host.
  image: docker:19.03-dind
  variables:
      GIT_SUBMODULE_STRATEGY: recursive
  # variables:
  #   DOCKER_CLIENT_TIMEOUT: 300
  #   COMPOSE_HTTP_TIMEOUT: 300
  tags:
    - mender-qa-slave-highcpu
  before_script:
    - unset DOCKER_HOST
    - unset DOCKER_TLS_VERIFY
    - unset DOCKER_CERT_PATH

    # for Post job status
    - apk --update add curl jq sysstat docker-compose hdparm
    - apk --update add xz libc6-compat

    - apk --update add bash git py-pip gcc make python2-dev
      libc-dev libffi-dev openssl-dev python3 curl jq sysstat

    - apk add $(cat tests/integration/mender_integration/tests/requirements/apk-requirements.txt)
    - pip3 install -r tests/integration/mender_integration/tests/requirements/python-requirements.txt

    # Install mender-artifact
    - wget https://downloads.mender.io/mender-artifact/3.4.0/linux/mender-artifact
    - chmod +x ./mender-artifact
    - mv ./mender-artifact /usr/bin
    - mender-artifact --version

    # Start dockerd in the background
    - /usr/local/bin/dockerd &
    # Wait for dockerd to start
    - |-
      MAX_WAIT=30
      while [ ! -e "/var/run/docker.sock" ] && [ $MAX_WAIT -gt 0 ]; do
        MAX_WAIT=$(($MAX_WAIT - 1))
        sleep 1
      done
    - pip3 install pytest requests
    - docker version # Verify that the docker server is up and running


  script:
    - echo Running the integration tests...
    - cd tests/integration
    - ls mender_integration
    - ./run.sh test_python_api_client.py::test_update_successful



# .test:
#     needs: []
#     cache:
#         key: ${CI_COMMIT_REF_SLUG}
#         paths:
#             - ~/.cache/pip-test/

# test:runtime:
#     extends: .test
#     stage: test
#     image: python:3.6-buster
#     before_script:
#         - mkdir -p /var/lib/mender/inventory
#         - mkdir -p /etc/mender
#         - cp support/* /var/lib/mender/inventory/
#         - pip install --cache-dir=~/.cache/pip-test/ .
#     script:
#         - mender-python-client bootstrap

# test:static:
#     extends: .test
#     stage: test
#     image: python:3.6-buster
#     before_script:
#         - pip install --cache-dir=~/.cache/pip-test mypy
#         - pip install --cache-dir=~/.cache/pip-test pylint
#         - pip install --cache-dir=~/.cache/pip-test -r requirements.txt
#     script:
#         - mypy src
#         - pylint --rcfile=.pylintrc-develop src

# test:unit:
#     extends: .test
#     stage: test
#     image: python:3.6-buster
#     before_script:
#         - pip install --cache-dir=~/.cache/pip-test/ -r requirements.txt
#         - pip install --cache-dir=~/.cache/pip-test/ -e .
#     script:
#         - pytest --cov=src/mender tests/unit && coveralls
